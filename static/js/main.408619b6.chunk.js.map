{"version":3,"sources":["components/Header.js","components/Section.js","api/api.js","utils/constants/constansts.js","features/news/newsSlice.js","utils/secToString.js","features/news/Article.js","features/news/ArticlesList.js","components/Main.js","utils/decodeEntities.js","features/news/NestedComment.js","features/news/NestedCommentList.js","features/news/RootComment.js","features/news/CommentsList.js","features/news/SingleNewsPage.js","components/Footer.js","components/PageNotFound.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Header","to","activeClassName","Section","children","api","options","this","_url","baseUrl","_headers","headers","res","ok","json","Promise","reject","status","id","fetch","method","then","_handleOriginalResponse","fetchNews","createAsyncThunk","a","getNewStoriesIds","response","newStoriesIds","news","getItemById","push","fetchRootComments","ids","comments","newsSlice","createSlice","name","initialState","statusRootComments","error","errorRootComments","reducers","extraReducers","pending","state","action","fulfilled","payload","rejected","message","selectAllNews","actions","clearComments","selectNewsStatus","selectNewsError","selectAllRootComments","selectRootCommentsStatus","selectRootCommentsError","secToString","s","Date","toLocaleString","hour12","Article","data","title","score","by","time","ArticlesList","content","dispatch","useDispatch","useSelector","newsStatus","newsError","React","useEffect","updateNews","setTimeout","clearTimeout","map","story","disabled","onClick","Main","entities","Entities","require","AllHtmlEntities","decodeEntities","str","decode","NestedComment","useState","commentsList","setCommentsList","commentData","setCommentData","text","err","console","log","deleted","kids","commentsIds","length","parse","NestedCommentList","listComments","setListComments","listItems","RootComment","nestedCommentListMarkup","CommentsList","SingleNewsPage","commentsMarkup","match","rootComments","rootCommentsStatus","rootCommentsError","newsId","params","newsData","find","Number","selectNewsById","updateRootComments","href","url","target","rel","descendants","type","Footer","PageNotFound","App","className","exact","path","render","Fragment","component","configureStore","reducer","newsReducer","Boolean","window","location","hostname","ReactDOM","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.408619b6.chunk.js","sourcesContent":["import React from 'react';\n\nimport { NavLink } from 'react-router-dom';\n\nexport const Header = () => {\n  return (\n    <header>\n      <h1>Hacker news app</h1>\n      <nav>\n        <ul>\n          <NavLink\n            to=\"/\"\n            activeClassName=\"\"\n          >\n            News List\n          </NavLink>\n        </ul>\n      </nav>\n    </header>\n  )\n}\n","import React from 'react';\n\nexport const Section = ({ children }) => {\n  return (\n    <section>\n      {children}\n    </section>\n  )\n}\n","import { NUMBER_OF_NEWS } from '../utils/constants/constansts';\n\nclass Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  _handleOriginalResponse(res) {\n    if (!res.ok) {\n      return Promise.reject(`Error: ${res.status}`);\n    }\n    return res.json();\n  }\n\n  getItemById(id) {\n    return fetch(`${this._url}/v0/item/${id}.json`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._handleOriginalResponse)\n  }\n\n  getNewStoriesIds() {\n    return fetch(`${this._url}/v0/newstories.json?print=pretty&orderBy=\"$key\"&limitToFirst=${NUMBER_OF_NEWS}`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._handleOriginalResponse)\n  }\n}\n\nexport const api = new Api({\n  baseUrl: 'https://hacker-news.firebaseio.com',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n","export const UPDATE_TIME = 60000;\nexport const NUMBER_OF_NEWS = 100;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport { api } from '../../api/api';\n\nexport const fetchNews = createAsyncThunk('news/fetchNews', async () => {\n  const response = await api.getNewStoriesIds();\n  const newStoriesIds = response;\n  const news = [];\n  for (let id of newStoriesIds) {\n    const response = await api.getItemById(id);\n    news.push(response);\n  }\n  return news;\n})\n\nexport const fetchRootComments = createAsyncThunk('news/fetchRootComments', async (ids) => {\n  const comments = [];\n  for (const id of ids) {\n    const response = await api.getItemById(id);\n    comments.push(response)\n  }\n  return comments;\n})\n\nconst initialState = {\n  news: [],\n  comments: [],\n  status: 'idle',\n  statusRootComments: 'idle',\n  error: null,\n  errorRootComments: null\n}\n\nconst newsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchNews.pending]: (state, action) => {\n      state.status = 'loading';\n    },\n    [fetchNews.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.news = action.payload;\n    },\n    [fetchNews.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    },\n    [fetchRootComments.pending]: (state, action) => {\n      state.statusRootComments = 'loading';\n    },\n    [fetchRootComments.fulfilled]: (state, action) => {\n      state.statusRootComments = 'succeeded';\n      state.comments = action.payload;\n    },\n    [fetchRootComments.rejected]: (state, action) => {\n      state.statusRootComments = 'failed';\n      state.errorRootComments = action.error.message;\n    }\n  }\n})\n\nexport default newsSlice.reducer;\n\nexport const { clearComments } = newsSlice.actions;\n\nexport const selectAllNews = state => state.news.news;\nexport const selectNewsById = (state, newsId) => state.news.news.find(story => story.id === Number(newsId));\nexport const selectNewsStatus = state => state.news.status;\nexport const selectNewsError = state => state.news.error;\n\nexport const selectAllRootComments = state => state.news.comments;\nexport const selectRootCommentsStatus = state => state.news.statusRootComments;\nexport const selectRootCommentsError = state => state.news.errorRootComments;\n\n","export const secToString = (s) => {\n  const date = new Date(s * 1000);\n  const options = { hour12: false };\n  return date.toLocaleString('en-us', options);\n}\n","import React from 'react';\n\nimport { secToString } from '../../utils/secToString';\n\nimport { Link } from 'react-router-dom';\n\nexport const Article = ({ data }) => {\n  return (\n    <article>\n      <header>\n        <h3>\n          {data.title}\n        </h3>\n      </header>\n      <p>\n        The story's score: {data.score}\n      </p>\n      <footer>\n        <address>\n          By: {data.by}\n        </address>\n        <p>\n          Date: <time>{secToString(data.time)}</time>\n        </p>\n      </footer>\n      <Link to={`/news/${data.id}`}>Go to this news</Link>\n    </article>\n  )\n}\n","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchNews, selectAllNews, selectNewsStatus, selectNewsError } from './newsSlice';\n\nimport { UPDATE_TIME } from '../../utils/constants/constansts';\n\nimport { Article } from './Article';\n\nexport const ArticlesList = () => {\n  const dispatch = useDispatch();\n\n  const news = useSelector(selectAllNews);\n  const newsStatus = useSelector(selectNewsStatus);\n  const newsError = useSelector(selectNewsError);\n\n  React.useEffect(() => {\n    const updateNews = setTimeout(() => {\n      dispatch(fetchNews());\n    }, UPDATE_TIME)\n\n    if (newsStatus === 'idle') {\n      dispatch(fetchNews())\n    }\n\n    return () => {\n      clearTimeout(updateNews);\n    }\n  }, [newsStatus, dispatch])\n\n  let content;\n\n  if (newsStatus === 'loading') {\n    content = news.map(story => (\n      <li key={story.id} id={story.id}><Article data={story} /></li>\n    ))\n  } else if (newsStatus === 'succeeded') {\n    content = news.map(story => (\n      <li key={story.id} id={story.id}><Article data={story} /></li>\n    ))\n  } else if (newsStatus === 'failed') {\n    content = <p>{newsError}</p>\n  }\n\n  return (\n    <>\n      <button\n        disabled={newsStatus === 'loading'}\n        onClick={() => { dispatch(fetchNews()) }}\n      >\n        {newsStatus === 'loading' ?\n          'Loading...'\n        :\n          'Update News'}\n      </button>\n      <h2>News list {newsStatus === 'loading' && <span>(loading...)</span>}</h2>\n      <ol>\n        {content}\n      </ol>\n    </>\n  )\n}\n","import React from 'react';\n\nimport { Section } from '../components/Section';\nimport { ArticlesList } from '../features/news/ArticlesList';\n\nexport const Main = () => {\n  return (\n    <main>\n      <Section>\n        <ArticlesList />\n      </Section>\n    </main>\n  )\n}\n","const Entities = require('html-entities').AllHtmlEntities;\n\nconst entities = new Entities();\n\nexport const decodeEntities = (str) => {\n  return entities.decode(str);\n}\n","import React from 'react';\n\nimport { api } from '../../api/api';\n\nimport { NestedCommentList } from './NestedCommentList';\n\nimport parse from 'html-react-parser';\nimport { decodeEntities } from '../../utils/decodeEntities';\nimport { secToString } from '../../utils/secToString';\n\n\nexport const NestedComment = ({ id }) => {\n  const [commentsList, setCommentsList] = React.useState(null);\n  const [commentData, setCommentData] = React.useState({});\n\n  React.useEffect(() => {\n    api.getItemById(id)\n      .then(\n        (data) => {\n          data.text = decodeEntities(data.text);\n          setCommentData(data);\n        },\n        (err) => {\n          console.log(err)\n        }\n      )\n  }, [id])\n\n  const handleCommentClick = () => {\n      setCommentsList((\n        <NestedCommentList commentsIds={commentData.kids}/>\n      ))\n  }\n\n  return (\n    commentData.deleted ?\n      <li key={commentData.id}>Comment has been deleted</li>\n    :\n      <li\n        onClick={commentData.kids && handleCommentClick}\n      >\n        {commentData.kids && (\n          <p>{commentData.kids.length} nested comment('s)</p>\n        )}\n        <address>by: {commentData.by}</address>\n        <p>Date: <time>{secToString(commentData.time)}</time></p>\n        <h4>Comment text:</h4>\n        {parse(decodeEntities(commentData.text))}\n        {commentsList}\n      </li>\n  )\n}\n","import React from 'react';\n\nimport { NestedComment } from './NestedComment';\n\nexport const NestedCommentList = ({ commentsIds }) => {\n  const [listComments, setListComments] = React.useState(null);\n  React.useEffect(() => {\n    const listItems = commentsIds.map(id => (\n      <NestedComment key={id} id={id}/>\n    ))\n    setListComments(listItems);\n  }, [commentsIds])\n  return (\n    <ul>\n      {listComments}\n    </ul>\n  )\n}\n","import React from 'react';\n\nimport parse from 'html-react-parser';\nimport { decodeEntities } from '../../utils/decodeEntities';\nimport { secToString } from '../../utils/secToString';\nimport { NestedCommentList } from './NestedCommentList';\n\nexport const RootComment = ({ data }) => {\n  const [commentsList, setCommentsList] = React.useState(null);\n  const [commentData, setCommentData] = React.useState({});\n\n  React.useEffect(() => {\n    setCommentData(data);\n  }, [data])\n\n  const handleCommentClick = () => {\n    const nestedCommentListMarkup = <NestedCommentList commentsIds={commentData.kids}/>;\n    setCommentsList(nestedCommentListMarkup)\n  }\n\n  return (\n    <li\n      onClick={commentData.kids && handleCommentClick}\n    >\n      {commentData.kids && (\n        <p>{commentData.kids.length} nested comment('s)</p>\n      )}\n      <address>by: {commentData.by}</address>\n      <p>Date: <time>{secToString(commentData.time)}</time></p>\n      <h4>Comment text:</h4>\n      {parse(decodeEntities(commentData.text))}\n      {commentData.kids && commentsList}\n    </li>\n  )\n}\n","import React from 'react';\n\nexport const CommentsList = ({ children }) => {\n  return (\n    <ul>\n      {children}\n    </ul>\n  )\n}\n","import React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { RootComment } from './RootComment';\n\nimport {\n  fetchRootComments,\n  selectNewsById,\n  selectAllRootComments,\n  selectRootCommentsStatus,\n  selectRootCommentsError\n} from './newsSlice';\n\nimport { secToString } from '../../utils/secToString';\n\nimport { UPDATE_TIME } from '../../utils/constants/constansts';\n\nimport { Link } from 'react-router-dom';\n\nimport { Section } from '../../components/Section';\n\nimport { CommentsList } from './CommentsList';\n\nexport const SingleNewsPage = ({ match }) => {\n  const dispatch = useDispatch();\n\n  const rootComments = useSelector(selectAllRootComments);\n  const rootCommentsStatus = useSelector(selectRootCommentsStatus);\n  const rootCommentsError = useSelector(selectRootCommentsError);\n\n  const { newsId } = match.params;\n\n  const newsData = useSelector(state => selectNewsById(state, newsId));\n\n  React.useEffect(() => {\n    dispatch(fetchRootComments(newsData.kids));\n  }, [dispatch, newsData])\n\n  React.useEffect(() => {\n    const updateRootComments = setTimeout(() => {\n      dispatch(fetchRootComments(newsData.kids));\n    }, UPDATE_TIME)\n\n    if (rootCommentsStatus === 'idle') {\n      dispatch(fetchRootComments(newsData.kids));\n    }\n\n    return () => {\n      clearTimeout(updateRootComments);\n    }\n  }, [dispatch, rootCommentsStatus, newsData.kids])\n\n  let commentsMarkup;\n\n  if (rootCommentsStatus === 'loading') {\n    commentsMarkup = (<p>Loading...</p>)\n  } else if (rootCommentsStatus === 'succeeded') {\n    commentsMarkup = rootComments.map(data =>\n      data.deleted ?\n        (<li key={data.id}>Comment has been deleted</li>)\n      :\n        (<RootComment key={data.id} data={data}/>)\n    )\n  } else if (rootCommentsStatus === 'failed') {\n    commentsMarkup = <p>{rootCommentsError}</p>\n  }\n\n  const handleClickUpdate = () => {\n    newsData.kids && dispatch(fetchRootComments(newsData.kids));\n  }\n\n  if (!newsData) {\n    return (\n        <section>\n          <h2>News not found!</h2>\n          <Link to=\"/\">Back to news list</Link>\n        </section>\n    )\n  }\n\n  return (\n    <Section>\n      <article>\n        <a\n          href={newsData.url}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Link to news\n        </a>\n        <h3>\n          {newsData.title}\n        </h3>\n        <p>\n          Date: {secToString(newsData.time)}\n        </p>\n        <p>\n          By: {newsData.by}\n        </p>\n        <p>\n          {newsData.kids ? newsData.descendants : '0'} comment('s)\n        </p>\n        <button\n          type=\"button\"\n          onClick={handleClickUpdate}\n          disabled={rootCommentsStatus === 'loading'}\n        >\n          {rootCommentsStatus === 'loading' ?\n            'Loading...'\n          :\n            'Update comments'\n          }\n        </button>\n        {newsData.kids && <CommentsList>{commentsMarkup}</CommentsList>}\n        <Link to=\"/\">Back to news list</Link>\n      </article>\n    </Section>\n  )\n}\n","import React from 'react';\n\nexport const Footer = () => {\n  return (\n    <footer>\n      <address>Author: Melnikov Aleksei</address>\n      <nav>\n          <h3>Contacts:</h3>\n          <ul>\n            <li>\n              <a\n                href=\"https://github.com/MelnikovAleksei\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                GitHub\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://www.facebook.com/meln.aleksei\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Facebook\n              </a>\n            </li>\n          </ul>\n      </nav>\n    </footer>\n  )\n}\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nexport const PageNotFound = () => {\n  return (\n    <main>\n      <h3>404 Page not found</h3>\n      <Link to=\"/\">Back to news list</Link>\n    </main>\n  )\n}\n","import React from 'react';\nimport {\n  Switch,\n  Route\n} from 'react-router-dom';\n\nimport { Header } from './components/Header';\nimport { Main } from './components/Main';\nimport { SingleNewsPage } from './features/news/SingleNewsPage';\nimport { Footer } from './components/Footer';\nimport { PageNotFound } from './components/PageNotFound';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <React.Fragment>\n              <Main />\n            </React.Fragment>\n          )}\n        />\n        <Route exact path=\"/news/:newsId\" component={SingleNewsPage}/>\n        <Route path=\"*\">\n          <PageNotFound />\n        </Route>\n      </Switch>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport newsReducer from '../features/news/newsSlice';\n\nexport default configureStore({\n  reducer: {\n    news: newsReducer\n  },\n});\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}